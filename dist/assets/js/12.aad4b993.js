(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{432:function(e,r,n){"use strict";n.r(r);var t=n(65),a=Object(t.a)({},(function(){var e=this,r=e.$createElement,n=e._self._c||r;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"remark"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#remark"}},[e._v("#")]),e._v(" remark")]),e._v(" "),n("p",[e._v("remark不单单是一个markdown的编译工具，更准确地说，它是一个围绕markdown的生态。通过插件化的方式，对mdast进行修改，使其转化成我们想要的样子。"),n("code",[e._v("remarkParse")]),e._v("就是将"),n("code",[e._v("markdown")]),e._v("编译为mdast的插件。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("import {unified} from 'unified'\nimport remarkParse from 'remark-parse'\nimport remarkRehype from 'remark-rehype'\nimport rehypeSanitize from 'rehype-sanitize'\nimport rehypeStringify from 'rehype-stringify'\n\nmain()\n\nasync function main() {\n  const file = await unified()\n    .use(remarkParse) // markdown -> mdast\n    .use(remarkRehype) // mdast -> hast\n    .use(rehypeSanitize) // sanitize HTML\n    .use(rehypeStringify) // hast -> string\n    .process('# Hello, Neptune!')\n\n  console.log(String(file))\n}\n")])])]),n("h1",{attrs:{id:"unified"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#unified"}},[e._v("#")]),e._v(" unified")]),e._v(" "),n("p",[n("code",[e._v("unified")]),e._v("相当于一种管道传输的思想，我们把内容放到管道里，先对其解析，解析为"),n("a",{attrs:{href:"https://github.com/syntax-tree",target:"_blank",rel:"noopener noreferrer"}},[e._v("ast"),n("OutboundLink")],1),e._v("，再使用一个一个插件处理ast，管道中的内容是以ast的形式传输的，最终将ast编译，并在管道的另一头获取到被处理后的内容。")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://lzc-personal-resource.oss-cn-beijing.aliyuncs.com/images/typora/image-20220708230927329.png",alt:"image-20220708230927329"}})]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("| ........................ process ........................... |\n| .......... parse ... | ... run ... | ... stringify ..........|\n\n          +--------+                     +----------+\nInput ->- | Parser | ->- Syntax Tree ->- | Compiler | ->- Output\n          +--------+          |          +----------+\n                              X\n                              |\n                       +--------------+\n                       | Transformers |\n                       +--------------+\n")])])]),n("p",[n("code",[e._v("unified")]),e._v("其实际上只是一个配置"),n("code",[e._v("processor")]),e._v("的过程，"),n("code",[e._v("unified()")]),e._v("返回值是一个"),n("code",[e._v("processor")]),e._v(","),n("code",[e._v("processor.use()")]),e._v("返回是一个被配置过的"),n("code",[e._v("processor")]),e._v(",在配置一个插件后，我们可以使用"),n("code",[e._v("processor.process()")]),e._v("或"),n("code",[e._v("processor.processSync()")]),e._v("处理。")]),e._v(" "),n("p",[n("code",[e._v("processor.processSync(file:VFile|undefined):VFile")])]),e._v(" "),n("p",[e._v("如果我们传入的值不是VFile，则会自动的使用"),n("code",[e._v("new VFile(x)")]),e._v(" 将其转化为"),n("code",[e._v("VFile")])]),e._v(" "),n("p",[e._v("输出的"),n("code",[e._v("VFile")]),e._v("我们可以使用"),n("code",[e._v("String(VFile)")]),e._v(" 或 "),n("code",[e._v("VFile.toString()")]),e._v("获取到其中的内容")]),e._v(" "),n("h2",{attrs:{id:"plugin"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#plugin"}},[e._v("#")]),e._v(" Plugin")]),e._v(" "),n("p",[e._v("插件是用于配置"),n("code",[e._v("processor")]),e._v("的，那么我们该如何写一个自己的插件呢")]),e._v(" "),n("h3",{attrs:{id:"function-attacher-options"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#function-attacher-options"}},[e._v("#")]),e._v(" function attacher(options?)")]),e._v(" "),n("p",[n("strong",[e._v("parameters")])]),e._v(" "),n("p",[n("code",[e._v("options")]),e._v(" -- configuration")]),e._v(" "),n("p",[n("strong",[e._v("Return")])]),e._v(" "),n("p",[n("code",[e._v("transformer")])]),e._v(" "),n("p",[n("code",[e._v("Plugin")]),e._v("应该是一个可以接收options，并且返回"),n("code",[e._v("transformer")]),e._v("的函数")]),e._v(" "),n("h3",{attrs:{id:"function-transformer-tree-file-next"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#function-transformer-tree-file-next"}},[e._v("#")]),e._v(" function transformer(tree,file[,next])")]),e._v(" "),n("p",[e._v("transformer是用来处理"),n("code",[e._v("syntax tree")]),e._v("和"),n("code",[e._v("VFile")]),e._v("的函数。")]),e._v(" "),n("p",[e._v("以下是官方的例子")]),e._v(" "),n("p",[e._v("move.js")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("export function move(options) {\n  if (!options || !options.extname) {\n    throw new Error('Missing `options.extname`')\n  }\n\n  return function (tree, file) {\n    if (file.extname && file.extname !== options.extname) {\n      file.extname = options.extname\n    }\n  }\n}\n")])])]),n("p",[e._v("index.js")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("import {read, write} from 'to-vfile'\nimport {reporter} from 'vfile-reporter'\nimport {unified} from 'unified'\nimport remarkParse from 'remark-parse'\nimport remarkRehype from 'remark-rehype'\nimport rehypeStringify from 'rehype-stringify'\nimport {move} from './move.js'\n\nconst file = await unified()\n  .use(remarkParse)\n  .use(remarkRehype)\n  .use(move, {extname: '.html'})\n  .use(rehypeStringify)\n  .process(await read('index.md'))\n\nconsole.error(reporter(file))\nawait write(file) // written VFile to ‘index.html’\n")])])]),n("p",[e._v("index.html")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("<h1>Hello, world!</h1>\n")])])]),n("h1",{attrs:{id:"实际应用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#实际应用"}},[e._v("#")]),e._v(" 实际应用")]),e._v(" "),n("p",[e._v("这是在我写一个vscode的插件时碰到的问题，这个vscode插件是用于预览markdown的，虽然插件市场已经有很多预览markdown的插件了，但是由于一些原因，这个插件需要使用remark来实现，所以需要重新做一个。")]),e._v(" "),n("p",[e._v("在需要实现滚动锁定功能的时候，其他插件的实现方法是，对每一个"),n("code",[e._v("HTML Element")]),e._v("添加一个属性:"),n("code",[e._v("data-line")]),e._v("(指的是该html在编辑器的位置)，这样我在滚动预览页面的时候就只需要找到能看到的最上面的"),n("code",[e._v("HTML Element")]),e._v(" 再找到与之对应的"),n("code",[e._v("data-line")]),e._v(" 接着滚动编辑器即可。")]),e._v(" "),n("p",[e._v("因此思路也非常清晰了，我们需要在对"),n("code",[e._v("hast")]),e._v("的处理过程中加上一步(添加data-line属性)，接着，我们开始编写此插件")]),e._v(" "),n("p",[e._v("rehype-source-line.ts")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("import {visit} from 'unist-util-visit';// 用于访问语法树的节点\n\nexport default function rehypeSourceLine() {\n  return (tree:any) => {\n    visit(tree, (node) => {\n        if(node.position){\n          node.properties = {dataLine: node.position.start.line};\n        }\n    });\n  };\n}\n")])])]),n("p",[e._v("让我们来看看效果")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://lzc-personal-resource.oss-cn-beijing.aliyuncs.com/images/typora/image-20220710150532940.png",alt:"image-20220710150532940"}})]),e._v(" "),n("p",[e._v("ok，那么这样一个简单的插件就完成了，那么我们能不能再尝试着改进一下呢，如果我想所有"),n("code",[e._v("data-line")]),e._v("都等于1呢，或者是如果我想设置其他属性，或者就不叫"),n("code",[e._v("data-line")]),e._v("呢，那么我这个插件使用的场景就太小了，因此一个可配置的插件才是一个合格的插件。接下来，我们应该给我们这个插件一个定位，我们到底是要做一个配置属性的插件，还是给html加上"),n("code",[e._v("data-line")]),e._v("的插件，很显然，配置属性并不是我们写这个插件的初衷，我们更想要的是，让人们更方便的给"),n("code",[e._v("HTML Element")]),e._v("加上位置属性。")]),e._v(" "),n("p",[e._v("接下来我们对之前不完善的场景提出解决方案。我的解决方案是如果用户没有输入配置，那么就和之前一样。如果用户输入了配置，配置提供两个配置项，一个是"),n("code",[e._v("propertyName")]),e._v("一个是"),n("code",[e._v("value")]),e._v(",这个"),n("code",[e._v("value")]),e._v("可以是一个数字，也可以是一个字符串数组，用于指定value的路径，比如说我输入一个"),n("code",[e._v("[position,start,line]")]),e._v(" 那么"),n("code",[e._v("value")]),e._v("则是"),n("code",[e._v("node.position.start.line")]),e._v("。")]),e._v(" "),n("p",[e._v("具体实现如下：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("import {visit} from 'unist-util-visit';\n\ninterface Options{\n  propertyName?:string,\n  value?:string|number|string[]\n}\nexport default function rehypeSourceLine(options?:Options) {\n  return (tree:any) => {\n    visit(tree, (node) => {\n        if(node.position){\n          if(!options||!options.propertyName&&!options.value){\n            node.properties = {dataLine: node.position.start.line};\n          }else{\n            const propertyName = options.propertyName?options.propertyName:'dataLine';\n            if(options.value){\n              const { value } = options;\n              if(Array.isArray(value)){\n                const realValue = value.reduce((pre,cur)=>{\n                  return pre[cur];\n                },node);\n                node.properties = {[propertyName]:realValue};\n              }else{\n                node.properties = {[propertyName]:value};\n              }\n            }else{\n              node.properties = {[propertyName]:node.position.start.line};\n            }\n          }\n\n        }\n    });\n  };\n}\n")])])])])}),[],!1,null,null,null);r.default=a.exports}}]);