import{ab as e,B as o,C as c,A as n,N as s,I as t,ac as p,P as l}from"./app.7c3fd3fd.js";import"./vendor.0d00c928.js";const u={},i=p('<h1 id="字体渲染" tabindex="-1"><a class="header-anchor" href="#字体渲染" aria-hidden="true">#</a> 字体渲染</h1><h2 id="字体的种类" tabindex="-1"><a class="header-anchor" href="#字体的种类" aria-hidden="true">#</a> 字体的种类</h2><p>目前最常见的字体都是矢量字体，在早期，文字的渲染都是通过点阵字体的形式</p><p>点阵字体:</p><p><img src="https://lzc-personal-resource.oss-cn-beijing.aliyuncs.com/202309181519685.png" alt=""></p><p>点阵字体和矢量字体可以理解为位图和矢量图的区别，矢量字体是通过数学公式去确定的字体轨迹，因此它可以很方便的缩放，而点阵字体就是有一群像素点组成，它不能很方便的缩放，也不能很方便的旋转。目前最常见的矢量字体是ttf，当然你可能也听过woff，woff是在浏览器上字体渲染的优化，他相比较ttf体积减少了40%，当然它本质还是ttf。</p><h2 id="字体渲染的流程" tabindex="-1"><a class="header-anchor" href="#字体渲染的流程" aria-hidden="true">#</a> 字体渲染的流程</h2>',7),r={href:"https://github.com/servo/font-kit",target:"_blank",rel:"noopener noreferrer"},k={href:"https://github.com/RazrFalcon/ttf-parser",target:"_blank",rel:"noopener noreferrer"},d={href:"https://github.com/mooman219/fontdue",target:"_blank",rel:"noopener noreferrer"},m=n("code",null,"ttf-parser",-1),f=p(`<h2 id="使用fontdue渲染字符串" tabindex="-1"><a class="header-anchor" href="#使用fontdue渲染字符串" aria-hidden="true">#</a> 使用fontdue渲染字符串</h2><p>想要通过fontdue渲染一个字符，非常的简单，README上面就有例子，但是fontdue并没有直接提供渲染字符串的例子，因为作者认为布局和每个字符的bitmap都给你了，那你自己就可以渲染(附上issue: https://github.com/mooman219/fontdue/issues/128)</p><p>我们先学习一下README上提供的例子</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token comment">// Read the font data.</span>
<span class="token keyword">let</span> font <span class="token operator">=</span> <span class="token macro property">include_bytes!</span><span class="token punctuation">(</span><span class="token string">&quot;../resources/Roboto-Regular.ttf&quot;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token keyword">u8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// Parse it into the font type.</span>
<span class="token keyword">let</span> font <span class="token operator">=</span> <span class="token namespace">fontdue<span class="token punctuation">::</span></span><span class="token class-name">Font</span><span class="token punctuation">::</span><span class="token function">from_bytes</span><span class="token punctuation">(</span>font<span class="token punctuation">,</span> <span class="token namespace">fontdue<span class="token punctuation">::</span></span><span class="token class-name">FontSettings</span><span class="token punctuation">::</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Rasterize and get the layout metrics for the letter &#39;g&#39; at 17px.</span>
<span class="token keyword">let</span> <span class="token punctuation">(</span>metrics<span class="token punctuation">,</span> bitmap<span class="token punctuation">)</span> <span class="token operator">=</span> font<span class="token punctuation">.</span><span class="token function">rasterize</span><span class="token punctuation">(</span><span class="token char">&#39;g&#39;</span><span class="token punctuation">,</span> <span class="token number">17.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于fontdue只是个光栅化字体的工具，所以加载字体直接使用的<code>include_bytes</code>, 这会把这个ttf字体在编译时直接变编译成二进制的形式加入到产物中，你可以使用font-kit去代替include_bytes这一步。在<code>rasterize</code>(光栅化)后，我们可以得到metrics和bitmap，bitmap就是位图，metrics是用来描述渲染后字形的像素信息的<img src="https://lzc-personal-resource.oss-cn-beijing.aliyuncs.com/202309181515519.png" alt=""></p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">let</span> font <span class="token operator">=</span> <span class="token macro property">include_bytes!</span><span class="token punctuation">(</span><span class="token string">&quot;../assets/Roboto-Regular.ttf&quot;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token keyword">u8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> roboto_regular <span class="token operator">=</span> <span class="token class-name">Font</span><span class="token punctuation">::</span><span class="token function">from_bytes</span><span class="token punctuation">(</span>font<span class="token punctuation">,</span> <span class="token namespace">fontdue<span class="token punctuation">::</span></span><span class="token class-name">FontSettings</span><span class="token punctuation">::</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> fonts <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span>roboto_regular<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> <span class="token keyword">mut</span> layout <span class="token operator">=</span> <span class="token class-name">Layout</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">CoordinateSystem</span><span class="token punctuation">::</span><span class="token class-name">PositiveYDown</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
layout<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token class-name">LayoutSettings</span> <span class="token punctuation">{</span>
  <span class="token punctuation">..</span><span class="token class-name">LayoutSettings</span><span class="token punctuation">::</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
layout<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>fonts<span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token class-name">TextStyle</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">.</span>text<span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>font_size<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> <span class="token keyword">mut</span> glyphs<span class="token punctuation">:</span><span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">u8</span><span class="token operator">&gt;&gt;</span> <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// 光栅化渲染</span>
<span class="token keyword">self</span><span class="token punctuation">.</span>text<span class="token punctuation">.</span><span class="token function">chars</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">for_each</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>c<span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> <span class="token punctuation">(</span>_<span class="token punctuation">,</span> bitmap<span class="token punctuation">)</span> <span class="token operator">=</span> fonts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">rasterize</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token keyword">self</span><span class="token punctuation">.</span>font_size<span class="token punctuation">)</span><span class="token punctuation">;</span>
  glyphs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>bitmap<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 获取整个字符串的宽高</span>
<span class="token keyword">let</span> dim<span class="token operator">=</span> <span class="token function">compute_dim</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>layout<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> <span class="token keyword">mut</span> bitmap<span class="token punctuation">:</span><span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">u8</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">;</span> dim<span class="token number">.0</span> <span class="token operator">*</span> dim<span class="token number">.1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// 遍历每一个字形，将其渲染到合适的位置</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span>pos<span class="token punctuation">,</span> char_bitmap<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token function">zip</span><span class="token punctuation">(</span>layout<span class="token punctuation">.</span><span class="token function">glyphs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>glyphs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> x <span class="token operator">=</span> pos<span class="token punctuation">.</span>x <span class="token keyword">as</span> <span class="token keyword">i32</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> y <span class="token operator">=</span> pos<span class="token punctuation">.</span>y <span class="token keyword">as</span> <span class="token keyword">i32</span> <span class="token keyword">as</span> <span class="token keyword">i32</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> width <span class="token operator">=</span> pos<span class="token punctuation">.</span>width <span class="token keyword">as</span> <span class="token keyword">usize</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> height <span class="token operator">=</span> pos<span class="token punctuation">.</span>height <span class="token keyword">as</span> <span class="token keyword">usize</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> <span class="token keyword">mut</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> y <span class="token keyword">in</span> y<span class="token punctuation">..</span>y<span class="token operator">+</span>height <span class="token keyword">as</span> <span class="token keyword">i32</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> x <span class="token keyword">in</span> x<span class="token punctuation">..</span>x<span class="token operator">+</span>width <span class="token keyword">as</span> <span class="token keyword">i32</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>y <span class="token operator">*</span> dim<span class="token number">.0</span> <span class="token keyword">as</span> <span class="token keyword">i32</span> <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">as</span> <span class="token keyword">usize</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> index <span class="token operator">&lt;</span> bitmap<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        bitmap<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> char_bitmap<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2>`,7),v={href:"https://blog.yangteng.me/articles/2019/typography-how-fonts-are-rendered/",target:"_blank",rel:"noopener noreferrer"},b={href:"https://learnopengl-cn.readthedocs.io/zh/latest/06%20In%20Practice/02%20Text%20Rendering/",target:"_blank",rel:"noopener noreferrer"},y={href:"https://github.com/RazrFalcon/tiny-skia/issues/1",target:"_blank",rel:"noopener noreferrer"};function h(w,g){const a=l("ExternalLinkIcon");return o(),c("div",null,[i,n("p",null,[s("在渲染之前，我们需要拿到一个.ttf的字体，并把它加载进来，我们可以通过"),n("a",r,[s("font-kit"),t(a)]),s("这种工具加载系统已经安装好的字体。拿到字体之后， 我们需要去解析这个字体，我们可以使用"),n("a",k,[s("ttf-parser"),t(a)]),s(", 解析之后，我们就可以实现光栅化某一个字符，在文本渲染中，这些光栅化后的字符称之为字形(glyph).但是目前只能光栅化某一个字符，并不能光栅化一个字符串，因此我们就需要对字形布局(layout)，这个布局就是需要控制每一个字符和字符之间的位置，包括换行也是需要layout去做，"),n("a",d,[s("fontdue"),t(a)]),s("是基于"),m,s(", 实现了光栅化和布局的功能，因此在加载完字体后就可以直接通过fontdue去做字体的渲染。")]),f,n("ul",null,[n("li",null,[n("a",v,[s("字体渲染 : 如何渲染一个文字"),t(a)])]),n("li",null,[n("a",b,[s("文字渲染"),t(a)])]),n("li",null,[n("a",y,[s("相关issue"),t(a)])])])])}const z=e(u,[["render",h],["__file","fontRender.html.vue"]]);export{z as default};
