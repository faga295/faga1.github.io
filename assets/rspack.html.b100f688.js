import{ab as p,B as o,C as c,A as s,N as n,I as t,ac as a,P as u}from"./app.805b3650.js";import"./vendor.1cc29387.js";const i={},l=a(`<h1 id="rspack源码解析" tabindex="-1"><a class="header-anchor" href="#rspack源码解析" aria-hidden="true">#</a> rspack源码解析</h1><h2 id="build" tabindex="-1"><a class="header-anchor" href="#build" aria-hidden="true">#</a> Build</h2><p>webpack的构建流程简单而言就是从<code>entry dependency</code>出发开始构建module树，每一个module会先扫描它的<code>dependency</code>，这些<code>dependency</code>有些是普通的模块js，有些是特殊的<code>dependency</code>，例如用于<code>esm</code>的<code>import dependency</code>, 接着这些模块会递归的进行<code>dependency</code>的收集，最终构建出<code>module graph</code>以及<code>chunk graph</code>, 一般而言，在webpack中一个<code>chunk</code>对应一个entry，最终输出的资源也是一个chunk对应一个资源，所以在构建完整个<code>chunk graph</code>之后就会遍历每个chunk，对其进行<code>code generation</code>， 最后再输出资源</p><h3 id="make" tabindex="-1"><a class="header-anchor" href="#make" aria-hidden="true">#</a> make</h3><p>make阶段，首先会有4个队列，一个是<code>factorize_queue</code>一个是<code>add_queue</code>一个是<code>build_queue</code>, 还有一个是<code>process_dependencies_queue</code>这四个队列是按顺序清除的，也就是<code>factorize_queue</code> 里的每项任务做完再进行<code>add_queue</code>里的任务，然后是<code>build_queue</code>最后是<code>process_dependencies_queue</code>.在make阶段每一个queue里的任务都会新建一个线程来处理，这也是rspack高性能的原因之一</p><h4 id="factorize-queue" tabindex="-1"><a class="header-anchor" href="#factorize-queue" aria-hidden="true">#</a> factorize_queue</h4><p><code>rspack_entry_plugin</code>会在make 这个hook添加<code>force_build_dependency</code>,最开始的<code>factorize_queue</code>是由<code>entry_dependency</code>构成的，<code>factorize_task</code>首先会创建一个<code>resource_data</code></p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">ResourceData</span> <span class="token punctuation">{</span>
  <span class="token comment">/// Resource with absolute path, query and fragment</span>
  <span class="token keyword">pub</span> resource<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>
  <span class="token comment">/// Absolute resource path only</span>
  <span class="token keyword">pub</span> resource_path<span class="token punctuation">:</span> <span class="token class-name">PathBuf</span><span class="token punctuation">,</span>
  <span class="token comment">/// Resource query with \`?\` prefix</span>
  <span class="token keyword">pub</span> resource_query<span class="token punctuation">:</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
  <span class="token comment">/// Resource fragment with \`#\` prefix</span>
  <span class="token keyword">pub</span> resource_fragment<span class="token punctuation">:</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
  <span class="token keyword">pub</span> resource_description<span class="token punctuation">:</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">DescriptionData</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
  <span class="token keyword">pub</span> mimetype<span class="token punctuation">:</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
  <span class="token keyword">pub</span> parameters<span class="token punctuation">:</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
  <span class="token keyword">pub</span> encoding<span class="token punctuation">:</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
  <span class="token keyword">pub</span> encoded_content<span class="token punctuation">:</span> <span class="token class-name">Option</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
  scheme<span class="token punctuation">:</span> <span class="token class-name">OnceCell</span><span class="token operator">&lt;</span><span class="token class-name">Scheme</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着会开始收集loader，loader分为四类，分别是<code>pre_loaders</code>, <code>post_loaders</code>,<code>normal_loaders</code>以及<code>inline_loaders</code>,最后构建一个<code>normal_module</code></p><h4 id="build-queue" tabindex="-1"><a class="header-anchor" href="#build-queue" aria-hidden="true">#</a> build_queue</h4><p>之前的<code>factorize_task</code>是收集了模块构建需要的信息，例如路径，<code>loaders</code>,<code>build_task</code>就是真正开始构建，构建第一步就是执行相应的<code>loader</code>,loader transform完成后开始解析</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">ParseResult</span> <span class="token punctuation">{</span>
  <span class="token keyword">pub</span> dependencies<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">BoxDependency</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
  <span class="token keyword">pub</span> presentational_dependencies<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token keyword">dyn</span> <span class="token class-name">DependencyTemplate</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">,</span>
  <span class="token keyword">pub</span> source<span class="token punctuation">:</span> <span class="token class-name">BoxSource</span><span class="token punctuation">,</span>
  <span class="token keyword">pub</span> analyze_result<span class="token punctuation">:</span> <span class="token class-name">OptimizeAnalyzeResult</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解析后会得到这个模块包含的依赖，转换后的代码， 以及性能分析结果(?)</p><h4 id="add-queue" tabindex="-1"><a class="header-anchor" href="#add-queue" aria-hidden="true">#</a> add_queue</h4><p><code>add_task</code>主要就是将<code>module</code>添加到<code>module graph</code>中</p><h4 id="process-dependencies-queue" tabindex="-1"><a class="header-anchor" href="#process-dependencies-queue" aria-hidden="true">#</a> process_dependencies_queue</h4><p><code>process_dependencies_task</code>主要是通过之前检测出来的依赖创建下一轮的<code>factorize_task</code></p><h3 id="seal" tabindex="-1"><a class="header-anchor" href="#seal" aria-hidden="true">#</a> seal</h3><p>make后就是在seal阶段去生成最后的代码</p><h4 id="code-generation" tabindex="-1"><a class="header-anchor" href="#code-generation" aria-hidden="true">#</a> code generation</h4><p>因为之前在build阶段已经完成了loader的转换这里主要是针对之前扫描出来的<code>dependency</code>, 例如比较常规的<code>CommonJsDependency</code></p><p><img src="https://lzc-personal-resource.oss-cn-beijing.aliyuncs.com/image-20231101094701439.png" alt="image-20231101094701439"></p><p>它会把<code>require(&#39;./answer&#39;)</code>转换为<code>__webpack_require__(&quot;./src/answer.js&quot;)</code></p><h4 id="process-runtime-requirements" tabindex="-1"><a class="header-anchor" href="#process-runtime-requirements" aria-hidden="true">#</a> process_runtime_requirements</h4><p>之前<code>code generation</code>每个模块的<code>CodeGenerationResult</code>都会有<code>runtimeRequirements</code>, 该流程会先以chunk纬度收集这些<code>runtimeRequirement</code>, 接着调用<code>additional_chunk_runtime_requirements</code>, 这个hook提供了特定情况的一些runtime，例如<code>CommonJsChunkFormatPlugin</code></p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">additional_chunk_runtime_requirements</span><span class="token punctuation">(</span>
    <span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span>
    _ctx<span class="token punctuation">:</span> <span class="token class-name">PluginContext</span><span class="token punctuation">,</span>
    args<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">AdditionalChunkRuntimeRequirementsArgs</span><span class="token punctuation">,</span>
  <span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">PluginAdditionalChunkRuntimeRequirementsOutput</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> compilation <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> args<span class="token punctuation">.</span>compilation<span class="token punctuation">;</span>
    <span class="token keyword">let</span> chunk_ukey <span class="token operator">=</span> args<span class="token punctuation">.</span>chunk<span class="token punctuation">;</span>
    <span class="token keyword">let</span> runtime_requirements <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> args<span class="token punctuation">.</span>runtime_requirements<span class="token punctuation">;</span>
    <span class="token keyword">let</span> chunk <span class="token operator">=</span> compilation
      <span class="token punctuation">.</span>chunk_by_ukey
      <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>chunk_ukey<span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">ok_or_else</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token macro property">anyhow!</span><span class="token punctuation">(</span><span class="token string">&quot;chunk not found&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> chunk<span class="token punctuation">.</span><span class="token function">has_runtime</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>compilation<span class="token punctuation">.</span>chunk_group_by_ukey<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> compilation
      <span class="token punctuation">.</span>chunk_graph
      <span class="token punctuation">.</span><span class="token function">get_number_of_entry_modules</span><span class="token punctuation">(</span>chunk_ukey<span class="token punctuation">)</span>
      <span class="token operator">&gt;</span> <span class="token number">0</span>
    <span class="token punctuation">{</span>
      runtime_requirements<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">RuntimeGlobals</span><span class="token punctuation">::</span><span class="token constant">REQUIRE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      runtime_requirements<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">RuntimeGlobals</span><span class="token punctuation">::</span><span class="token constant">STARTUP_ENTRYPOINT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      runtime_requirements<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">RuntimeGlobals</span><span class="token punctuation">::</span><span class="token constant">EXTERNAL_INSTALL_CHUNK</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着会出发<code>runtime_requirement_in_tree</code>, 这个hook主要是根据已有<code>runtime_requirements</code>注入其他有关联的<code>runtime_requirements</code>, 接着为该chunk 添加<code>runtime modules</code></p><h4 id="create-chunk-assets" tabindex="-1"><a class="header-anchor" href="#create-chunk-assets" aria-hidden="true">#</a> create_chunk_assets</h4><p>这几步做完之后就是真正创建资源了，这些资源就是将来要输出的文件</p><p>我们之前对每一个模块进行了<code>code generation</code> 以及为每一个chunk添加需要的<code>runtime module</code></p>`,30),r=s("code",null,"render_manifest",-1),d={href:"https://webpack.js.org/configuration/output/#outputfilename",target:"_blank",rel:"noopener noreferrer"},k=a(`<p>最后就是模块代码的大整合</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">pub</span> <span class="token keyword">async</span> <span class="token keyword">fn</span> <span class="token function-definition function">render_main</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">self</span><span class="token punctuation">,</span> args<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token namespace">rspack_core<span class="token punctuation">::</span></span><span class="token class-name">RenderManifestArgs</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;_</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">BoxSource</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> compilation <span class="token operator">=</span> args<span class="token punctuation">.</span>compilation<span class="token punctuation">;</span>
    <span class="token keyword">let</span> chunk <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token function">chunk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> runtime_requirements <span class="token operator">=</span> compilation
      <span class="token punctuation">.</span>chunk_graph
      <span class="token punctuation">.</span><span class="token function">get_tree_runtime_requirements</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>args<span class="token punctuation">.</span>chunk_ukey<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> <span class="token punctuation">(</span>module_source<span class="token punctuation">,</span> chunk_init_fragments<span class="token punctuation">)</span> <span class="token operator">=</span>
      <span class="token function">render_chunk_modules</span><span class="token punctuation">(</span>compilation<span class="token punctuation">,</span> <span class="token operator">&amp;</span>args<span class="token punctuation">.</span>chunk_ukey<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> <span class="token punctuation">(</span>header<span class="token punctuation">,</span> startup<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">.</span><span class="token function">render_bootstrap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>args<span class="token punctuation">.</span>chunk_ukey<span class="token punctuation">,</span> args<span class="token punctuation">.</span>compilation<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> sources <span class="token operator">=</span> <span class="token class-name">ConcatSource</span><span class="token punctuation">::</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    sources<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">RawSource</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;var __webpack_modules__ = &quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    sources<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>module_source<span class="token punctuation">)</span><span class="token punctuation">;</span>
    sources<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">RawSource</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    sources<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>header<span class="token punctuation">)</span><span class="token punctuation">;</span>
    sources<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">render_runtime_modules</span><span class="token punctuation">(</span>compilation<span class="token punctuation">,</span> <span class="token operator">&amp;</span>args<span class="token punctuation">.</span>chunk_ukey<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> chunk<span class="token punctuation">.</span><span class="token function">has_entry_module</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>compilation<span class="token punctuation">.</span>chunk_graph<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> last_entry_module <span class="token operator">=</span> compilation
        <span class="token punctuation">.</span>chunk_graph
        <span class="token punctuation">.</span><span class="token function">get_chunk_entry_modules_with_chunk_group_iterable</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>chunk<span class="token punctuation">.</span>ukey<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">last</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span><span class="token string">&quot;should have last entry module&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span> <span class="token operator">=</span> compilation
        <span class="token punctuation">.</span>plugin_driver
        <span class="token punctuation">.</span><span class="token function">render_startup</span><span class="token punctuation">(</span><span class="token class-name">RenderStartupArgs</span> <span class="token punctuation">{</span>
          compilation<span class="token punctuation">,</span>
          chunk<span class="token punctuation">:</span> <span class="token operator">&amp;</span>chunk<span class="token punctuation">.</span>ukey<span class="token punctuation">,</span>
          module<span class="token punctuation">:</span> <span class="token operator">*</span>last_entry_module<span class="token punctuation">,</span>
          source<span class="token punctuation">:</span> startup<span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">?</span>
      <span class="token punctuation">{</span>
        sources<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">if</span> runtime_requirements<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token class-name">RuntimeGlobals</span><span class="token punctuation">::</span><span class="token constant">RETURN_EXPORTS_FROM_RUNTIME</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        sources<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">RawSource</span><span class="token punctuation">::</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;return __webpack_exports__;\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> final_source <span class="token operator">=</span> <span class="token keyword">if</span> compilation<span class="token punctuation">.</span>options<span class="token punctuation">.</span>output<span class="token punctuation">.</span>iife <span class="token punctuation">{</span>
      <span class="token function">render_iife</span><span class="token punctuation">(</span>sources<span class="token punctuation">.</span><span class="token function">boxed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      sources<span class="token punctuation">.</span><span class="token function">boxed</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    final_source <span class="token operator">=</span> <span class="token function">render_init_fragments</span><span class="token punctuation">(</span>
      final_source<span class="token punctuation">,</span>
      chunk_init_fragments<span class="token punctuation">,</span>
      <span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token class-name">ChunkRenderContext</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token keyword">let</span> <span class="token class-name">Some</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span> <span class="token operator">=</span> compilation<span class="token punctuation">.</span>plugin_driver<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token class-name">RenderArgs</span> <span class="token punctuation">{</span>
      compilation<span class="token punctuation">,</span>
      chunk<span class="token punctuation">:</span> <span class="token operator">&amp;</span>args<span class="token punctuation">.</span>chunk_ukey<span class="token punctuation">,</span>
      source<span class="token punctuation">:</span> <span class="token operator">&amp;</span>final_source<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">?</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token class-name">Ok</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">Ok</span><span class="token punctuation">(</span>final_source<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>render_manifest</code>后就可以通过<code>emit_asset</code>添加资源了</p><h4 id="process-assets-hook" tabindex="-1"><a class="header-anchor" href="#process-assets-hook" aria-hidden="true">#</a> process_assets(hook)</h4><p>在最后输出到文件系统之前，需要对assets进行一些处理，例如minify就是通过这个hook对资源进行压缩的</p><h2 id="runtime-module" tabindex="-1"><a class="header-anchor" href="#runtime-module" aria-hidden="true">#</a> Runtime module</h2><p>在我们使用<code>rspack</code>构建完一个项目后, 我们可以看到这样的模块</p><p><img src="https://lzc-personal-resource.oss-cn-beijing.aliyuncs.com/image-20231028151550264.png" alt="image-20231028151550264"></p><p>这些模块就是<code>runtime module</code>, 它是为了让打包后的产物能够正常在浏览器上运行的模块</p><p>我们可以看到这样的<code>runtime requirement</code>，每一个<code>requirement</code>就是一个<code>runtime module</code>, 在整个构建过程中会添加<code>runtime requirement</code>, 最后在<code>RuntimePlugin</code> 里通过<code>runtime_requirements_in_tree</code>为chunk添加<code>runtime module</code></p><p><img src="https://lzc-personal-resource.oss-cn-beijing.aliyuncs.com/image-20231028151933331.png" alt="image-20231028151933331"></p><h3 id="runtimechunk" tabindex="-1"><a class="header-anchor" href="#runtimechunk" aria-hidden="true">#</a> runtimeChunk</h3>`,12),m={href:"https://www.rspack.dev/config/optimization.html#optimizationruntimechunk",target:"_blank",rel:"noopener noreferrer"},v=s("code",null,"optimization.runtimeChunk",-1),h=s("code",null,"entry option",-1),_=s("code",null,"runtime",-1),b=s("code",null,"runtime chunk",-1),f=s("code",null,"optimization.runtimeChunk",-1),g=s("code",null,"entry.runtime",-1),y=s("code",null,"entryName",-1),w=a("<p>在seal阶段会进行codeSplit, 在正式codeSplit之前会进行<code>prepare_input_entrypoints_and_modules</code>, 这里会添加<code>namedChunk</code>，建立<code>chunkGroup</code>, 创建<code>runtimeChunk</code>,如果没有设置<code>entry.runtime</code>，这个<code>runtimeChunk</code>就是它自己</p>",1);function q(x,R){const e=u("ExternalLinkIcon");return o(),c("div",null,[l,s("p",null,[n("接下来就是需要去调用"),r,n("hook，对于js资源，这个hook先是需要拿到输出文件的文件名，根据用户的"),s("a",d,[n("filename_template"),t(e)]),n(" 拿到用户想要的文件名")]),k,s("p",null,[s("a",m,[n("runtimeChunk"),t(e)]),n("是一种优化策略，它的可以把runtimeChunk单独分成一个chunk，我们可以通过配置中的"),v,n(" 进行配置，也可以给"),h,n("添加一个"),_,n("属性用来配置"),b,n("的name，实际上"),f,n("也是通过对"),g,n("配置为"),y,n("实现的")]),w])}const z=p(i,[["render",q],["__file","rspack.html.vue"]]);export{z as default};
