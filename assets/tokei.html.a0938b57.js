import{ab as p,B as o,C as c,A as s,N as n,I as e,ac as t,P as i}from"./app.58af2e3e.js";import"./vendor.44925b61.js";const l={},u=t('<h1 id="用rust构建前端工具链" tabindex="-1"><a class="header-anchor" href="#用rust构建前端工具链" aria-hidden="true">#</a> 用rust构建前端工具链</h1><p>用<code>rust</code>、<code>go</code>这些语言来写一些前端的工具链其实已经火了有一段时间了， 像<code>esbuild</code>, <code>swc</code>, <code>lightingcss</code>, <code>turbo</code>等等, 因此我于去年十月份开始嘴上说要学rust, 并于今年一月份学完rust基础语法...其实一直没有什么动力学rust, 主要是因为没啥灵感, 学了也不知道做啥, 我一直也不太喜欢重复造轮子, 但自身也很少有灵光乍现的时候, 所以也一直就卡在那里。 虽然我没咋学rust, 但好在平常有关注rust的生态, 也算是做了一些积累。</p><h2 id="灵感来源" tabindex="-1"><a class="header-anchor" href="#灵感来源" aria-hidden="true">#</a> 灵感来源</h2>',3),r=s("code",null,"loc",-1),k=s("code",null,"loc",-1),d={href:"https://github.com/XAMPPRocky/tokei",target:"_blank",rel:"noopener noreferrer"},m=s("code",null,"napi-rs",-1),v=s("code",null,"tokei",-1),b=s("code",null,"api",-1),g={href:"https://github.com/faga295/napi-tokei",target:"_blank",rel:"noopener noreferrer"},h=s("h2",{id:"napi-rs",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#napi-rs","aria-hidden":"true"},"#"),n(" napi-rs")],-1),f={href:"https://napi.rs/",target:"_blank",rel:"noopener noreferrer"},_=s("code",null,"napi-rs",-1),y=s("code",null,"napi-rs",-1),w={href:"https://nodejs.org/api/n-api.html",target:"_blank",rel:"noopener noreferrer"},j=t(`<p>以下是官网首页的例子:</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token comment">// lib.rs</span>
<span class="token keyword">use</span> <span class="token namespace">napi_derive<span class="token punctuation">::</span></span>napi<span class="token punctuation">;</span>
 
<span class="token attribute attr-name">#[napi]</span>
<span class="token keyword">fn</span> <span class="token function-definition function">fibonacci</span><span class="token punctuation">(</span>n<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token keyword">u32</span> <span class="token punctuation">{</span>
  <span class="token keyword">match</span> n <span class="token punctuation">{</span>
    <span class="token number">1</span> <span class="token operator">|</span> <span class="token number">2</span> <span class="token operator">=&gt;</span> <span class="token number">1</span><span class="token punctuation">,</span>
    _ <span class="token operator">=&gt;</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fibonacci</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过<code>napi-rs</code>, 可以生成一个js文件<code>index.js</code>以及相应的<code>.d.ts</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// main.mjs</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> fibonacci <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./index.js&#39;</span>
 
<span class="token comment">// output: 5</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fibonacci</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>并且是<code>esm</code>, <code>cjs</code>兼容的</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// main.cjs</span>
<span class="token keyword">const</span> <span class="token punctuation">{</span> fibonacci <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./index&#39;</span><span class="token punctuation">)</span>
 
<span class="token comment">// output: 5</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fibonacci</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面介绍的如何定义一个函数, 当然还能定义数组, 对象, 字符串等等。</p><p>接下来看一下<code>napi-rs</code>生成的js文件 <img src="https://lzc-personal-resource.oss-cn-beijing.aliyuncs.com/20230126160850.png" alt=""> 大概的思路就是根据不同的操作系统, 不同的CPU架构引用不同的二进制模块就是里面的<code>.node</code>文件。在你发布由<code>napi-rs</code>创建的包的时候, 同时也会发布不同操作系统不同CPU架构的二进制模块, 你可以在package.json中的<code>optionalDependencies</code>字段看到</p><p><img src="https://lzc-personal-resource.oss-cn-beijing.aliyuncs.com/20230126161355.png" alt=""></p><h2 id="代码实现" tabindex="-1"><a class="header-anchor" href="#代码实现" aria-hidden="true">#</a> 代码实现</h2><p><code>napi-tokei</code>只是一个对<code>tokei</code>的简单封装, 因此只需要很少的代码量就可以完成。</p><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token attribute attr-name">#![deny(clippy::all)]</span>
<span class="token keyword">use</span> <span class="token namespace">napi_derive<span class="token punctuation">::</span></span>napi<span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">tokei<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">Config</span><span class="token punctuation">,</span> <span class="token class-name">Languages</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// js Object</span>
<span class="token attribute attr-name">#[napi(object)]</span>
<span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">Langs</span> <span class="token punctuation">{</span>
  <span class="token keyword">pub</span> lang<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">,</span>
  <span class="token keyword">pub</span> lines<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span>
  <span class="token keyword">pub</span> code<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span>
  <span class="token keyword">pub</span> comments<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span>
  <span class="token keyword">pub</span> blanks<span class="token punctuation">:</span> <span class="token keyword">u32</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token comment">// export function tokei(include: Array&lt;string&gt;, exclude: Array&lt;string&gt;): Array&lt;Langs&gt;</span>
<span class="token attribute attr-name">#[napi]</span>
<span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">tokei</span><span class="token punctuation">(</span>include<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> exclude<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token operator">&amp;</span><span class="token keyword">str</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">Langs</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> config <span class="token operator">=</span> <span class="token class-name">Config</span><span class="token punctuation">::</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> <span class="token keyword">mut</span> languages <span class="token operator">=</span> <span class="token class-name">Languages</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  languages<span class="token punctuation">.</span><span class="token function">get_statistics</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>include<span class="token punctuation">,</span> <span class="token operator">&amp;</span>exclude<span class="token punctuation">,</span> <span class="token operator">&amp;</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">let</span> <span class="token keyword">mut</span> vec<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">Langs</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token keyword">for</span> item <span class="token keyword">in</span> languages<span class="token punctuation">.</span><span class="token function">into_iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> lang <span class="token operator">=</span> <span class="token class-name">Langs</span> <span class="token punctuation">{</span>
      lang<span class="token punctuation">:</span> item<span class="token number">.0</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      lines<span class="token punctuation">:</span> <span class="token punctuation">(</span>item<span class="token number">.1</span><span class="token punctuation">.</span><span class="token function">lines</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token keyword">u32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      code<span class="token punctuation">:</span> <span class="token punctuation">(</span>item<span class="token number">.1</span><span class="token punctuation">.</span>code <span class="token keyword">as</span> <span class="token keyword">u32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      comments<span class="token punctuation">:</span> <span class="token punctuation">(</span>item<span class="token number">.1</span><span class="token punctuation">.</span>comments <span class="token keyword">as</span> <span class="token keyword">u32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      blanks<span class="token punctuation">:</span> <span class="token punctuation">(</span>item<span class="token number">.1</span><span class="token punctuation">.</span>blanks <span class="token keyword">as</span> <span class="token keyword">u32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    vec<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>lang<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  vec
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12);function x(L,V){const a=i("ExternalLinkIcon");return o(),c("div",null,[u,s("p",null,[n("灵感最开始来自于一条推特, 应该是bun的作者发了一个截图, 是在命令行打印了bun的代码量相关信息的, 接着就找到了"),r,n(", 不过"),k,n("貌似不咋更新了, 接着就找到了类似的项目"),s("a",d,[n("tokei"),e(a)]),n(", 这既是一个二进制项目也是一个库项目, 因此我们可以通过它暴露出来的函数, 再结合"),m,n(", 就可以为node提供使用"),v,n("的"),b,n(", 这就是"),s("a",g,[n("napi-tokei"),e(a)]),n("准备做的事情了。")]),h,s("p",null,[n("在用rust写前端工具链的时候, "),s("a",f,[n("napi-rs"),e(a)]),n("想必是绕不开的话题了, 所以这里先简单讲讲"),_,n("。")]),s("p",null,[y,n("是一个rust版的"),s("a",w,[n("Node-API"),e(a)]),n(", 它提供了一些api(具体来说是宏), 让我们能够用rust来写js。")]),j])}const N=p(l,[["render",x],["__file","tokei.html.vue"]]);export{N as default};
